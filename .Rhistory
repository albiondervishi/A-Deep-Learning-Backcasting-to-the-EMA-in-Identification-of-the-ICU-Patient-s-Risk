data(follic, package = "randomForestSRC")
follic.obj <- rfsrc(Surv(time, status) ~ ., follic, nsplit = 3, ntree = 100)
partial.obj <- partial(follic.obj,
partial.type = "cif",
partial.xvar = "age",
partial.values = follic.obj$xvar[, "age"],
partial.time = follic.obj$time.interest)
partial.obj
data(follic, package = "randomForestSRC")
follic.obj <- rfsrc(Surv(time, status) ~ ., follic, nsplit = 3, ntree = 100)
plot.competing.risk(follic.obj)
follic
follic.obj <- rfsrc(Surv(age, status) ~ ., follic, nsplit = 3, ntree = 100)
plot.competing.risk(follic.obj)
follic.obj
follic.obj$predicted
DATA_msicu
sma <- function(y){
sma <-   SMA(y,3)
dsw <- tail(sma, n=1)
dsw1 <- dsw
dsw1
}
ema <- function(y){
sma <-   EMA(y, length(y))
dsw <- tail(sma, n=1)
dsw1 <- dsw
dsw1
}
Sodium <- c(145,140,142)
sma(Sodium)
library(ggfortify)
library(corrplot)
library(ggplot2)
library(gridBase)
library(gridExtra)
library(PASWR2)
library(party)
library(repmis)
library(mgcv)
library(rpart)
library(party)
library(rpart.plot)
library(DT)
library(rpart)
library(rpart.plot)
library(randomForest)
library(webshot)
library(markdown)
library(knitr)
library(knitLatex)
library(knitrBootstrap)
library(datasets)
library(ggplot2)
library(aod)
library(epiR)
library(PredictABEL)
library(caret)
library(rpart)
library(rpart.plot)
library(rattle)
library(randomForest)
library(gridExtra)
library(dplyr)
library(lattice)
library(ggplot2)
library(cluster)
library(mlbench)
library(randomForest)
library(forestFloor)
library(AUC)
library(gnm)
library(pROC)
library(Epi)
library(caTools)
library(lubridate)
library(Distance)
library(ResourceSelection)
library(PredictABEL)
library(e1071)
library(splitstackshape)
library(dplyr)
library(tidyr)
library("data.table")
library(downloader)
library(reshape)
library(reshape2)
library(sjmisc)
library(stringi)
library(forecast)
library(plyr)
library(TTR)
library(earth)
library(gbm)
library(splines)
library(parallel)
sma <- function(y){
sma <-   SMA(y,3)
dsw <- tail(sma, n=1)
dsw1 <- dsw
dsw1
}
ema <- function(y){
sma <-   EMA(y, length(y))
dsw <- tail(sma, n=1)
dsw1 <- dsw
dsw1
}
Sodium <- c(145,140,142)
sma(Sodium)
ema(Sodium)
Sodium <- c(145,135,142)
sma(Sodium)
ema(Sodium)
Sodium <- c(145,135,142, 133)
sma(Sodium)
ema(Sodium)
Sodium <- c(145,135,125)
sma(Sodium)
ema(Sodium)
Sodium <- c(145,135,125,154)
sma(Sodium)
ema(Sodium)
sma <- function(y){
sma <-   SMA(y,2)
dsw <- tail(sma, n=1)
dsw1 <- dsw
dsw1
}
ema <- function(y){
sma <-   EMA(y,2)
dsw <- tail(sma, n=1)
dsw1 <- dsw
dsw1
}
Sodium <- c(145,135,125,154)
sma(Sodium)
ema(Sodium)
library(ggfortify)
library(corrplot)
library(ggplot2)
library(gridBase)
library(gridExtra)
library(PASWR2)
library(party)
library(repmis)
library(mgcv)
library(rpart)
library(party)
library(rpart.plot)
library(DT)
library(rpart)
library(rpart.plot)
library(randomForest)
library(webshot)
library(markdown)
library(knitr)
library(knitLatex)
library(knitrBootstrap)
library(datasets)
library(ggplot2)
library(aod)
library(epiR)
library(PredictABEL)
library(caret)
library(rpart)
library(rpart.plot)
library(rattle)
library(randomForest)
library(gridExtra)
library(dplyr)
library(lattice)
library(ggplot2)
library(cluster)
library(mlbench)
library(randomForest)
library(forestFloor)
library(AUC)
library(gnm)
library(pROC)
library(Epi)
library(caTools)
library(lubridate)
library(Distance)
library(ResourceSelection)
library(PredictABEL)
library(e1071)
library(splitstackshape)
library(dplyr)
library(tidyr)
library("data.table")
library(downloader)
library(reshape)
library(reshape2)
library(sjmisc)
library(stringi)
library(forecast)
library(plyr)
library(TTR)
library(earth)
library(gbm)
library(splines)
library(parallel)
sma <- function(y){
sma <-   SMA(y,2)
dsw <- tail(sma, n=1)
dsw1 <- dsw
dsw1
}
ema <- function(y){
sma <-   EMA(y,2)
dsw <- tail(sma, n=1)
dsw1 <- dsw
dsw1
}
Sodium <- c(145,135,125,154)
sma(Sodium)
ema(Sodium)
Sodium <- c(145,135,125)
sma(Sodium)
ema(Sodium)
Sodium <- c(145,135,125, 120)
sma(Sodium)
ema(Sodium)
a <- c(1:10)
b <- c(1:10)
x <- c(5:10)
y <- a+bx
y <- a+b*x
plot(y, "l")
a <- c(1:10)
b <- c(1:10)
x <- c(5:10)
y <- a+b*x
a <- c(1:10)
b <- c(1:10)
x <- 5
y <- a+b*x
plot(y, "l")
y
plot(y)
a <- c(1:10)
b <- c(1:-10)
x <- 5
y <- a+b*x
plot(y)
y
x <- c(1:10)
y <- 4+2*x
x <- c(1:10)
plot(y)
plot(y)
y
x <- c(0:10)
y <- 4+2*x
plot(y)
y
y <- 9+2*x
plot(y)
y
y <- 9+6*x
plot(y)
y
res <- function(x){
m <- mean(x)
d <- sum(x^7)
e <- d^2
dde <- m/d+e
dde
}
x <- c(1:10)
res(x)
res <- function(x){
m <- mean(x)
d <- sum(x^7)
e <- d^2
dde <- (m/d)/e
dde
}
x <- c(1:10)
res(x)
source('~/Documents/file of sodium work/random forest .R', encoding = 'UTF-8')
rescale <- function(x, ...) { m <- mean(x, ...)
s <- sd(x, ...)
(x - m) / s
}
x <- c(1:5, NA, 6:7)
x
rescale(x)
x <- c(1:5, 6:7)
rescale(x)
compare <- function(x, y) { if (x < y) {
-1
} else if (y < x) {
1
} else {
0 }
}
compare(3,6)
compare <- function(x, y) {
if (x < y) {-1}
else if (y < x) { 1}
else {0 }
}
x <- c(3:10)
y <- c(4:10)
compare(x,y)
d <- data.frame(x,y)
x <- c(3:10)
y <- c(4:11)
d <- data.frame(x,y)
dre <- sapply(d compare)
dre <- sapply(d, compare)
dre <- sapply(d, compare(d$x, d$y))
dre <- sapply(d, compare(d$x, d$y))
d
plot(d)
library(h2o)
h2o.init()
library(h2o)
h2o.init()
library(h2o)
h2o.init()
library(h2o)
h2o.init()
install.packages("h2o")
library(h2o)
h2o.init()
h2o.init(nthreads = -1, max_mem_size = '2g', ip = "127.0.0.1", port = 50001)
h2o.init(nthreads = -1, max_mem_size = '2g', ip = "127.0.0.1", port = 54321)
library(h2o)
h2o.init()
library(h2o)
h2o.init(nthreads=-1)
h2o.init()
library(h2o)
h2o.init()
h2o.init()
h2o.init()
library(h2o)
h2o.init()
h2o.init()
library(h2o)
h2o.init()
h2o.init()
library(h2o)
h2o.init()
library(h2o)
h2o.init()
h2o.init()
h2o.init()
library(h2o)
h2o.init()
library(h2o)
h2o.init()
library(h2o)
localH2O = h2o.init()
localH2O = h2o.init()
install.packages("h2o4gpu")
library("h2o4gpu")
install.packages("h2o")
library(h2o)
localH2O = h2o.init()
library(h2o)
localH2O = h2o.init()
library(h2o)
localH2O = h2o.init()
versions::installed.versions("h2o").
versions::installed.versions("h2o")
versions::installed.versions("h2o")
library(lime)       # ML local interpretation
library(vip)        # ML global interpretation
library(pdp)        # ML global interpretation
library(ggplot2)    # visualization pkg leveraged by above packages
library(caret)# ML model building
library(statmod)
library(h2o)
h2o.init()
localH2O = h2o.init(ip="localhost", port = 54321,
startH2O = TRUE, nthreads=-1)
library(h2o)
localH2O = h2o.init(ip="localhost", port = 54321,
startH2O = TRUE, nthreads=-1)
library(h2o)
h2o.init()
remove.packages {h2o}
remove.packages {"h2o"}
remove.packages("h2o")
remove.packages("h2o", lib)
remove.packages("h2o", lib)
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
install.packages("h2o", repos=(c("http://s3.amazonaws.com/h2o-release/h2o/master/1497/R", getOption("repos"))))
library(h2o)
localH2O = h2o.init()
uptadeR()
install.packages("GGally")
library(h2o)
install.packages("h2o")
h2o.init()
library(h2o)
h2o.init()
library(h2o)
h2o.init()
h2o.init(ip = "localhost", port = 54321, name = NA_character_,
startH2O = TRUE, forceDL = FALSE, enable_assertions = TRUE,
license = NULL, nthreads = -1, max_mem_size = NULL,
min_mem_size = NULL, ice_root = tempdir(), log_dir = NA_character_,
log_level = NA_character_, strict_version_check = TRUE,
proxy = NA_character_, https = FALSE, insecure = FALSE,
username = NA_character_, password = NA_character_,
cookies = NA_character_, context_path = NA_character_,
ignore_config = FALSE, extra_classpath = NULL,
jvm_custom_args = NULL, bind_to_localhost = TRUE)
library(h2o)
Sys.unsetenv("http_proxy")
h2o.init()
library(h2o)
h2o.init()
localH2O = h2o.init(ip="localhost", port = 54323,
startH2O = TRUE, nthreads=-1)
h2o.init()
library(h2o)
h2o.init()
library(h2o)
localH2O = h2o.init(ip = 'localhost', port = 54321)
localH2O = h2o.init(ip = 'localhost', port = 54321)
library(h2o)
localH2O = h2o.init(ip = 'localhost', port = 54321)
localH2O = h2o.init(ip = 'localhost', port = 54321)
library(h2o)
h2o.init()
library(h2o)
localH2O = h2o.init(ip = 'localhost', port = 54321)
localH2O = h2o.init(ip = 'localhost', port = 54321)
echo R_LIBS_USER=\"~/.Rlibrary\" > ~/.Renviron
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
if (! ("methods" %in% rownames(installed.packages()))) { install.packages("methods") }
if (! ("statmod" %in% rownames(installed.packages()))) { install.packages("statmod") }
if (! ("graphics" %in% rownames(installed.packages()))) { install.packages("graphics") }
if (! ("RCurl" %in% rownames(installed.packages()))) { install.packages("RCurl") }
if (! ("jsonlite" %in% rownames(installed.packages()))) { install.packages("jsonlite") }
if (! ("tools" %in% rownames(installed.packages()))) { install.packages("tools") }
if (! ("utils" %in% rownames(installed.packages()))) { install.packages("utils") }
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/latest_stable_R)))
library(h2o)
localH2O = h2o.init()
install.packages("h2o", type="source", repos= c ("http://h2o-release.s3.amazonaws.com/h2o/latest_stable_R"))
library(h2o)
localH2O = h2o.init()
install.packages("h2o", type="source", repos= (c ("http://h2o-release.s3.amazonaws.com/h2o/latest_stable_R")))
library(h2o)
library(h2o)
localH2O = h2o.init()
library(h2o)
# The following two commands remove any previously installed H2O packages for R.
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# Next, we download packages that H2O depends on.
pkgs <- c("RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
# Now we download, install and initialize the H2O package for R.
install.packages("h2o", type="source", repos="https://h2o-release.s3.amazonaws.com/h2o/rel-yates/4/R")
# Finally, let's load H2O and start up an H2O cluster
library(h2o)
h2o.init()
library(h2o)
remove.packages("h2o")
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o", lib) }
pkgs <- c("RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
# Now we download, install and initialize the H2O package for R.
install.packages("h2o", type="source", repos="https://h2o-release.s3.amazonaws.com/h2o/rel-yates/4/R")
library(h2o)
library(h2o)
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o", lib) }
install.packages("h2o")
library(h2o)
library(h2o)
1/1+exp-(0.3)
1/1+exp(-0.3)
1/1+exp(0.3)
shiny::runApp('Desktop/Deep learning/LEMA  backcasting')
setwd("~/Desktop/Deep learning/LEMA  backcasting")
runApp()
runApp()
test_last_0_8H_LEMA
test_last_0_8H_LEMA
setwd("~/Documents/file of sodium work")
load('Data_last_0_8H_Val_LAB.RData')
Data_last_0_8H_Val_LAB$FLAG <- as.factor(Data_last_0_8H_Val_LAB$FLAG)
Data_last_0_8H_Val_LAB <- Data_last_0_8H_Val_LAB[,-c(1,2, 9, 10,11)]
#dim(Data_last_0_8H_Val_LAB)
set.seed(141)
sample <- sample.int(n = nrow(Data_last_0_8H_Val_LAB), size = floor(.60*nrow(Data_last_0_8H_Val_LAB)))
train_last_0_8H_LEMA <- Data_last_0_8H_Val_LAB[sample, ]
test_last_0_8H_LEMA  <- Data_last_0_8H_Val_LAB[-sample, ]
test_last_0_8H_LEMA
save(train_last_0_8H_LEMA,file='train_last_0_8H_LEMA.RData')
save(test_last_0_8H_LEMA,file='test_last_0_8H_LEMA.RData')
setwd("~/Desktop/Deep learning/LEMA  backcasting")
save(train_last_0_8H_LEMA,file='train_last_0_8H_LEMA.RData')
save(test_last_0_8H_LEMA,file='test_last_0_8H_LEMA.RData')
runApp()
setwd("~/Desktop/A Deep Learning Backcasting Approach to the Electrolyte, Metabolite, and Acid-Base Parameters in Identification of the ICU Patient’s Risk. ")
